name: Create Custom image using Packer

on:
  pull_request:
    branches:
      - 'main'
    types:
      - closed

jobs:
  packer:
    if: github.event.pull_request.merged == true
    name: Building Jar and Creating Custom Packer Image
    runs-on: ubuntu-latest
    env:
      MYSQL_DATABASE_URL: ${{secrets.MYSQL_DATABASE_URL}}
      MYSQL_DATABASE: ${{secrets.MYSQL_DATABASE}}
      MYSQL_DATABASE_USERNAME: ${{secrets.MYSQL_DATABASE_USERNAME}}
      MYSQL_DATABASE_PASSWORD: ${{secrets.MYSQL_DATABASE_PASSWORD}}
      PROJECT_ID: ${{vars.PROJECT_ID}}
      SOURCE_IMAGE: ${{vars.SOURCE_IMAGE}}
      TOPIC_ID: ${{vars.TOPIC_ID}}
      PKR_VAR_project_id: ${{vars.PROJECT_ID}}
      PKR_VAR_source_image_family: ${{vars.SOURCE_IMAGE_FAMILY}}
      PKR_VAR_zone                : ${{vars.ZONE}}
      PKR_VAR_ssh_username        : ${{vars.SSH_USERNAME}}
      PKR_VAR_image_name          : ${{vars.IMAGE_NAME}}
      PKR_VAR_scripts_path        : ${{vars.SCRIPTS_PATH}}
      PKR_VAR_jar_source          : ${{vars.JAR_SOURCE}}
      PKR_VAR_jar_destination     : ${{vars.JAR_DESTINATION}}
      PKR_VAR_network : ${{vars.NETWORK}}
      PKR_VAR_service_account_email : ${{secrets.GCP_SERVICE_ACCOUNT_EMAIL}}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Preparing log directory
        run: |
          sudo chmod -R 733 /var/log

      - name: Initialize MYSQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -h localhost -e "CREATE DATABASE IF NOT EXISTS $MYSQL_DATABASE;" -u$MYSQL_DATABASE_USERNAME -p$MYSQL_DATABASE_PASSWORD

      - name: Google Cloud Platform Auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{secrets.SERVICE_ACCOUNT_JSON}}'

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        id: setup-packer

      - name: Init Packer
        run: packer init ./packer/.

      - name: Build image
        run: |
          packer build ./packer/.

      - name: Storing Image Name
        run: |
          SOURCE_IMAGE=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2) && echo "SOURCE_IMAGE=$SOURCE_IMAGE" >> "$GITHUB_ENV"
          
      - name: List Files in Directory
        run: |
          ls -l

      - id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |- 
            DB_URL:projects/1021504010524/secrets/DB_URL
            DB_NAME:projects/1021504010524/secrets/DB_NAME
            DB_PASSWORD:projects/1021504010524/secrets/DB_PASSWORD
            KMS_KEY:projects/1021504010524/secrets/KMS_KEY

      - name: Generate random string
        id: random-string
        run: echo "RANDOM_STRING=$(uuidgen | tr -d '-')" >> $GITHUB_ENV

      - name: Create new Instance Template version
        run: |
            gcloud compute instance-templates create vm-instance-template-${{env.RANDOM_STRING}} \
            --machine-type ${{vars.MACHINE_TYPE}} \
            --instance-template-region=${{vars.INSTANCE_TEMPLATE_REGION}} \
            --create-disk=image=${{vars.IMAGE_BASE_PATH}}/${{env.SOURCE_IMAGE}},size=${{vars.DISK_SIZE}},boot=true,type=${{vars.DISK_TYPE}},auto-delete=yes,kms-key=${{steps.secrets.outputs.KMS_KEY}}  \
            --network=${{vars.VPC_NETWORK}} \
            --subnet=${{vars.VPC_SUBNETWORK}} \
            --metadata startup-script="echo 'MYSQL_DATABASE_URL=${{steps.secrets.outputs.DB_URL}}' > .env && echo 'MYSQL_DATABASE_USERNAME=${{steps.secrets.outputs.DB_NAME}}' >> .env && echo 'MYSQL_DATABASE_PASSWORD=${{steps.secrets.outputs.DB_PASSWORD}}' >> .env && echo 'PROJECT_ID=${{vars.PROJECT_ID}}' >> .env && echo 'TOPIC_ID=${{vars.TOPIC_ID}}' >> .env && sudo mv .env /opt/ && sudo chown csye6225:csye6225 /opt/.env && sudo setenforce 0 && sudo systemctl daemon-reload && sudo systemctl restart webapp-launch.service" \
            --service-account ${{secrets.SERVICE_ACCOUNT_EMAIL}} \
            --tags=vm-instance

      - name: 'Linking New Instance Template to Managed Instance group'
        run: | 
            gcloud compute instance-groups managed set-instance-template \
            ${{vars.IGM_BASE_PATH}} \
            --template=${{vars.IT_BASE_PATH}}-${{env.RANDOM_STRING}}
  
      - name: 'Initiate the Rolling Update to apply the new instance template to the managed instance group'
        run: |
            gcloud compute instance-groups managed rolling-action start-update ${{vars.IGM_BASE_PATH}} --type=${{vars.UPDATE_TYPE}} \
            --version=template=${{vars.IT_BASE_PATH}}-${{env.RANDOM_STRING}}

      - name: 'Verify the completion of rolling updates by checking the "version target reached" flag.'
        run: |
            gcloud compute instance-groups managed wait-until ${{vars.IGM_BASE_PATH}} --version-target-reached

      - name: Describe managed instance group
        run: |
            gcloud compute instance-groups managed describe ${{vars.IGM_BASE_PATH}}